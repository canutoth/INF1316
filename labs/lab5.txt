[INF1316] Lab 5 - Luana Pinho Bueno Penha (2312082), Theo Jesus Canuto de Sousa (2311293)


1. Faça um programa para criar dois processos que se comunicam via pipe. O Pai lê do pipe enquanto o filho escreve no pipe. Exiba o resultado do que foi escrito e lido.


Código fonte do programa q1.c:


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>


int main() {
   int fd[2];
   pid_t pid;
   char mensagem[] = "Aqui é o processo filho!";
   char buffer[100];


   if (pipe(fd) < 0) {
       perror("Erro ao criar pipe");
       exit(EXIT_FAILURE);
   }


   pid = fork();


   if (pid < 0) {
       perror("Erro no fork");
       exit(EXIT_FAILURE);
   }


   if (pid == 0) {
       close(fd[0]);
       write(fd[1], mensagem, strlen(mensagem) + 1);
       close(fd[1]);
   } else {
       close(fd[1]);
       read(fd[0], buffer, sizeof(buffer));
       printf("Pai leu: %s\n", buffer);
       close(fd[0]);
   }


   return 0;
}






Linhas de comando para compilação e execução do programa:
~/inf1316/lab5$ gcc -o main q1.c
~/inf1316/lab5$ ./main


Saída gerada:
Pai leu: Aqui é o processo filho!


Reflexão sobre a razão de ter obtido esse resultado:
O processo filho escreve a mensagem “Aqui é o processo filho!” na ponta de escrita do pipe (fd[1]), e o processo pai lê essa mensagem pela ponta de leitura (fd[0]). Como usamos as funções write() e read(), a transmissão segue a ordem em que os dados foram enviados (FIFO – First-In-First-Out), garantindo que o pai receba exatamente o que o filho escreveu. Também fechamos corretamente os lados da pipe que não eram usados em cada processo, com close(), para evitar desperdício de recursos e deixar o código mais limpo. 


2. Faça um programa para redirecionar a entrada e a saída, lendo os dados de um arquivo e gerando a saída em outro.


Conteúdo presente no arquivo “entrada.txt”: 
"Arquivo de entrada para ser lido”.


Código fonte do programa q2.c:
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>


int main() {
   int inputFd, outputFd;


   inputFd = open("entrada.txt", O_RDONLY);
   if (inputFd < 0) {
       perror("Erro ao abrir entrada.txt");
       exit(EXIT_FAILURE);
   }


   outputFd = open("saida.txt", O_WRONLY | O_CREAT | O_TRUNC, 0644);
   if (outputFd < 0) {
       perror("Erro ao abrir/criar saida.txt");
       close(inputFd);
       exit(EXIT_FAILURE);
   }


   dup2(inputFd, STDIN_FILENO);


   dup2(outputFd, STDOUT_FILENO);


   char buffer[1024];
   ssize_t bytesRead;


   while ((bytesRead = read(STDIN_FILENO, buffer, sizeof(buffer))) > 0) {
       write(STDOUT_FILENO, buffer, bytesRead);
   }


   close(inputFd);
   close(outputFd);


   return 0;
}


Linhas de comando para compilação e execução do programa:      
~/inf1316/lab5$ gcc -o main q2.c
~/inf1316/lab5$ ./main 
~/inf1316/lab5$ cat saida.txt 


Saída gerada:
"Arquivo de entrada para ser lido”.


Reflexão sobre a razão de ter obtido esse resultado:


O programa redireciona a entrada padrão (stdin) para ler o conteúdo do arquivo entrada.txt e a saída padrão (stdout) para escrever no arquivo saida.txt, usando a função dup2(). Isso faz com que qualquer leitura feita pelo programa venha diretamente do arquivo, e qualquer coisa que seria impressa na tela vá direto para o arquivo de saída. O conteúdo foi copiado corretamente de um arquivo para o outro, mostrando que o redirecionamento funcionou como esperado. Essa abordagem mostra bem como dá pra manipular os fluxos de entrada e saída no C de forma parecida com o que fazemos na linha de comando do Unix.
 
3. Faça um programa para criar um pipe e executar dois processos que são utilitários do Unix que se comuniquem através do pipe criado, assim como a shell faz.


Código fonte do programa q3.c:


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>


int main() {
    int fd[2];
    pid_t pid;
    
    if (pipe(fd) == -1) {
        perror("Erro ao criar pipe");
        exit(EXIT_FAILURE);
    }
    
    pid = fork();
    
    if (pid == -1) {
        perror("Erro no fork");
        exit(EXIT_FAILURE);
    }
    
    if (pid == 0) {
        close(fd[1]);
        dup2(fd[0], STDIN_FILENO);
        close(fd[0]);
        execlp("wc", "wc", NULL);
        perror("Erro no execlp wc");
        exit(EXIT_FAILURE);
    }
    
    else {
        close(fd[0]);
        dup2(fd[1], STDOUT_FILENO);
        close(fd[1]);
        execlp("ps", "ps", NULL);
        perror("Erro no execlp ps");
        exit(EXIT_FAILURE);
    }
    
    return 0;
}


Linhas de comando para compilação e execução do programa:
~/inf1316/lab5$ gcc -o main q3.c
~/inf1316/lab5$ ./main


Linha de comando para checar:
~/inf1316/lab5$ ps | wc


Saída gerada:
Para ambos os comandos, foi obtido:
4      16     119


Reflexão sobre a razão de ter obtido esse resultado:
A saída obtida é consistente tanto para q3.c quanto para o comando direto no shell (ps | wc), pois ambos implementam a mesma lógica: o processo pai redireciona a saída do comando ps (que lista os processos em execução) para o pipe, enquanto o processo filho redireciona a entrada do comando wc (que conta linhas, palavras e caracteres) para ler do pipe. O valor 4 16 119 representa, respectivamente, o número de linhas, palavras e bytes da saída do ps, que é processada pelo wc. Isso demonstra como a comunicação entre processos via pipe permite a composição de comandos Unix, simulando o comportamento de um pipeline na shell.


4. Faça um programa que cria dois processos leitores e um processo escritor em uma mesma pipe. Faça o escritor dormir metade do tempo dos leitores, e mostre como os leitores consomem os dados produzidos pelo escritor. 


Código fonte do programa q4.c:


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>


int main() {
    int fd[2];
    pipe(fd);


    pid_t leitor1 = fork();
    if (leitor1 == 0) {
        close(fd[1]); 
        char buffer[100];
        while (1) {
            int n = read(fd[0], buffer, sizeof(buffer));
            if (n <= 0) break;
            buffer[n] = '\0';
            printf("leitor 1 (filho) leu: %s\n", buffer);
            sleep(2); 
        }
        close(fd[0]);
        exit(0);
    }


    pid_t leitor2 = fork();
    if (leitor2 == 0) {
        close(fd[1]); 
        char buffer[100];
        while (1) {
            int n = read(fd[0], buffer, sizeof(buffer));
            if (n <= 0) break;
            buffer[n] = '\0';
            printf("leitor 2 (filho) leu: %s\n", buffer);
            sleep(2);
        }
        close(fd[0]);
        exit(0);
    }


    close(fd[0]); 
    for (int i = 1; i <= 10; i++) {
        char mensagem[50];
        snprintf(mensagem, sizeof(mensagem), "tenho %d reais pra comprar chocolate", i);
        write(fd[1], mensagem, strlen(mensagem) + 1);
        printf("escritor (pai) escreveu: %s\n", mensagem);
        sleep(1); 
    }
    close(fd[1]);


    wait(NULL);
    wait(NULL);


    return 0;
}


Linhas de comando para compilação e execução do programa:
~/inf1316/lab5$ gcc -o main q4.c
~/inf1316/lab5$ ./main


Saída gerada:
escritor (pai) escreveu: tenho 1 reais pra comprar chocolate
leitor 2 (filho) leu: tenho 1 reais pra comprar chocolate
escritor (pai) escreveu: tenho 2 reais pra comprar chocolate
leitor 1 (filho) leu: tenho 2 reais pra comprar chocolate
escritor (pai) escreveu: tenho 3 reais pra comprar chocolate
leitor 2 (filho) leu: tenho 3 reais pra comprar chocolate
escritor (pai) escreveu: tenho 4 reais pra comprar chocolate
leitor 1 (filho) leu: tenho 4 reais pra comprar chocolate
escritor (pai) escreveu: tenho 5 reais pra comprar chocolate
leitor 2 (filho) leu: tenho 5 reais pra comprar chocolate
escritor (pai) escreveu: tenho 6 reais pra comprar chocolate
leitor 1 (filho) leu: tenho 6 reais pra comprar chocolate
escritor (pai) escreveu: tenho 7 reais pra comprar chocolate
leitor 2 (filho) leu: tenho 7 reais pra comprar chocolate
escritor (pai) escreveu: tenho 8 reais pra comprar chocolate
leitor 1 (filho) leu: tenho 8 reais pra comprar chocolate
escritor (pai) escreveu: tenho 9 reais pra comprar chocolate
leitor 2 (filho) leu: tenho 9 reais pra comprar chocolate
escritor (pai) escreveu: tenho 10 reais pra comprar chocolate
leitor 1 (filho) leu: tenho 10 reais pra comprar chocolate
Reflexão sobre a razão de ter obtido esse resultado:


O resultado obtido demonstra o comportamento concorrente dos processos leitores (filho) e escritor (pai), onde o escalonamento do sistema operacional alterna a execução entre eles. O processo pai produz mensagens a cada 1 segundo, enquanto cada leitor consome os dados a cada 2 segundos. Como a pipe é um buffer FIFO (First-In-First-Out), os leitores alternam o consumo das mensagens: quando uma mensagem é lida por um leitor, ela é removida da pipe, fazendo com que o próximo leitor (que estava bloqueado aguardando dados) leia a próxima mensagem disponível. A saída mostra essa alternância entre os leitores 1 e 2, evidenciando como o sistema operacional gerencia o acesso concorrente à pipe, garantindo que apenas um processo leia cada mensagem, mesmo com múltiplos leitores. O tempo de sleep maior dos leitores (2s) em relação ao escritor (1s) cria esse padrão intercalado de leitura.